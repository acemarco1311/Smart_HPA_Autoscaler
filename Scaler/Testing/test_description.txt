Locust:
- Input: total concurrent users, spawn rate, total running time.
- Output: request per second, failure rate, etc (response time)

Resource request and limit of each microservice.

Some considerations:
    Microservice keep getting crashed because getting over resource limit?
    Smart HPA not fast enough? -> Terminate because over limit?
    Smart HPA scale so tight? -> Terminate because over limit?


test_one: microservice crashes naturally because resource limit, Smart HPA keep operate
capacity running time = 300s,
0s delay between resource exchange
Locust: 100 users, 0.7 users/second, total runtime = 300
Microservice: 15m/120Mi -> 20m/200Mi
Target utilization: 80% -> 0.8 * 15 = 12m
min rep = 1
max rep = 2
no replication in Smart HPA component
-> no incorrectness because manager didn't die.
-> Smart HPA correctness checking work even when some microservices
cannot be extracted at the start



test_two:
capacity running time = 400s
0s delay between resource exchange
Locust: 150 users, 0.7 users/second, total runtime = 400
Microservice: 15m/120Mi -> 20m/200Mi
Target utilization: 80% -> 0.8 * 15 = 12m cpu
min rep = 1
max rep = 3
no replication in Smart HPA component
-> Smart HPA can extract all microservices at the start
-> Resource exchange work with microservices failures.

test_three:
capacity running time = 500s
0s deplay between resource exchange
Locust: 150 users, 0.7 users/second, total runtime = 500
Microservice: 15m/120Mi -> 20m/200Mi
Target utilization: 80% -> 0.8 * 15 = 12m cpu
min rep = 1
max rep = 3
restart frontend manager every 60second as frontend usually being scaled up
no replication in Smart HPA component
